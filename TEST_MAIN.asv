clear
close all
clc
load('data.mat')
addpath('..\matlab\Scripts_m\fun_MHSampling\')
addpath('..\matlab\Scripts_m\ex_PMCMC\')

%% note
% the problem is not identifiable
% because the prior and the likelihood are both semetric
% All the codes seems to be right
%% parameters
z_n=10000;% number of samples in anealing sampling (AS)
AS_n=1000000;% max number of cycles in AS
metro_n=500; % number of metropolis steps at each temperature
[~,A,w] = kfcn(1,1,para1)
[~,A,w] = kfcn(1,1,para2)
clear A W
temper_bounds=[0.2,1];
% bigger bounds gives smoother transition and thus better fit
% smaller bound gives fister convergence
%% training data
train_n = 2;
train_ind = randsample(length(x),train_n);
train_sigv = 0;
train_x = x(train_ind);
train_z = z(train_ind);
train_t = y(train_ind);
clear x y z train_ind

K1 = kfcn(train_x,train_x,para1);
K1 = K1+eye(length(train_x))*1e-10;
[A,~] = chol(K1,'lower');
%% plot the prior
if train_n == 2
    [mesh_X,mesh_Y] = meshgrid(-10:0.1:10);
    
    Z_prior = reshape(Pz_Given_x(train_x,[mesh_X(:),mesh_Y(:)]',K1),size(mesh_X));
    figure
    mesh(mesh_X,mesh_Y,exp(Z_prior))
    hidden off
    %% plot the likelihood
    Z_like = reshape(Ly_Given_z([mesh_X(:),mesh_Y(:)]',train_t,para2),size(mesh_X));
    figure
    mesh(mesh_X,mesh_Y,exp(Z_like))
    hidden off
    
    %% plot the posterior
    figure
    mesh(mesh_X,mesh_Y,exp(Z_prior + Z_like))
    hidden off
end
%% direct importance sample
% Sample from prior
u = randn(train_n,z_n);
z = A * u;
clear A u
% convert to upper triangle
for i = z_n:-1:1
    if z(1,i) > z(2,i)
        z(:,i) = [];
    end
end
figure
mvhist(z,5)
% weight

e = exp(1);

log_traget = @(z) Pz_Given_x(train_x,z,K1) + Ly_Given_z(z,train_t,para2);
p = log_traget(z);

figure
hold on
plot3(z(1,:),z(2,:),p,'.')

z_bestsample = z(:,w==max(p))
if ESS(w)>0.3
    logW = Ly_Given_z(z,train_t,para2);
    w = logw2w(logW);
    z = resample(z,w);
    z_med = median(z,2)
    z_estimation = mean(z,2)
    
    
    Ly_Given_z(train_z,train_t,para2)
    Ly_Given_z(z_bestsample,train_t,para2)
    Ly_Given_z(z_med,train_t,para2)
    Ly_Given_z(z_estimation,train_t,para2)
    
    plot3(train_z(1,1),train_z(2,1),e^Ly_Given_z(train_z,train_t,para2),'o')
    plot3(z_bestsample(1,1),z_bestsample(2,1),e^Ly_Given_z(z_bestsample,train_t,para2),'rx')
    plot3(z_med(1,1),z_med(2,1),e^Ly_Given_z(z_med,train_t,para2),'^')
    plot3(z_estimation(1,1),z_estimation(2,1),e^Ly_Given_z(z_estimation,train_t,para2),'v')
end
return
%% sequential IS-MH sample
% init
temper=0;
for AS_i = 1: AS_n
    % get the log likelihood of current parameter
    logW = Ly_Given_z(z,train_t,para2);
    % find the perfered temper accoording to ESS
    [w_tempered_diff,temper_diff]=temper_weights(logW,temper_bounds);
    if (temper + temper_diff) >1
        temper_diff = 1 - temper;
        temper = 1;
    else
        temper = temper + temper_diff;
    end
    temper % for debug and progress
    % IS
    ind = IS('weights',w_tempered_diff);
    z = z(:,ind);
    % use MH samples to randomize the sample (avoid degeneracy)
    log_traget = @(z) Pz_Given_x(train_x,z,K1) + Ly_Given_z(z,train_t,para2)*temper;
    log_traget_t = @(z) log_traget(z')';
    z = MHSampling(log_traget_t,z','iter_n',metro_n)';
    if temper == 1
        % if last run, run more iterations to assure convergence
        tic
        z = MHSampling(log_traget_t,z','iter_n',metro_n*2)';
        toc
        break
    end
end
figure
mvhist(z,5)
mean(z,2)
train_z
return